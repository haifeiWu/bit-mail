// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	
	"gorm.io/gen"
	"gorm.io/gen/field"
	
	"gorm.io/plugin/dbresolver"
	
	"bit-mail/pkg/model"
)

func newUserEmail(db *gorm.DB, opts ...gen.DOOption) userEmail {
	_userEmail := userEmail{}

	_userEmail.userEmailDo.UseDB(db, opts...)
	_userEmail.userEmailDo.UseModel(&model.UserEmail{})

	tableName := _userEmail.userEmailDo.TableName()
	_userEmail.ALL = field.NewAsterisk(tableName)
	_userEmail.ID = field.NewInt32(tableName, "id")
	_userEmail.EmailID = field.NewInt32(tableName, "email_id")
	_userEmail.RecipientID = field.NewInt32(tableName, "recipient_id")
	_userEmail.IsRead = field.NewBool(tableName, "is_read")
	_userEmail.ReadAt = field.NewTime(tableName, "read_at")
	_userEmail.Folder = field.NewInt32(tableName, "folder")

	_userEmail.fillFieldMap()

	return _userEmail
}

type userEmail struct {
	userEmailDo

	ALL         field.Asterisk
	ID          field.Int32
	EmailID     field.Int32
	RecipientID field.Int32
	IsRead      field.Bool
	ReadAt      field.Time
	Folder      field.Int32 // 1：收件箱，2：发件箱，3：草稿，4：垃圾箱

	fieldMap map[string]field.Expr
}

func (u userEmail) Table(newTableName string) *userEmail {
	u.userEmailDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEmail) As(alias string) *userEmail {
	u.userEmailDo.DO = *(u.userEmailDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEmail) updateTableName(table string) *userEmail {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.EmailID = field.NewInt32(table, "email_id")
	u.RecipientID = field.NewInt32(table, "recipient_id")
	u.IsRead = field.NewBool(table, "is_read")
	u.ReadAt = field.NewTime(table, "read_at")
	u.Folder = field.NewInt32(table, "folder")

	u.fillFieldMap()

	return u
}

func (u *userEmail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEmail) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["email_id"] = u.EmailID
	u.fieldMap["recipient_id"] = u.RecipientID
	u.fieldMap["is_read"] = u.IsRead
	u.fieldMap["read_at"] = u.ReadAt
	u.fieldMap["folder"] = u.Folder
}

func (u userEmail) clone(db *gorm.DB) userEmail {
	u.userEmailDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEmail) replaceDB(db *gorm.DB) userEmail {
	u.userEmailDo.ReplaceDB(db)
	return u
}

type userEmailDo struct{ gen.DO }

type IUserEmailDo interface {
	gen.SubQuery
	Debug() IUserEmailDo
	WithContext(ctx context.Context) IUserEmailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEmailDo
	WriteDB() IUserEmailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEmailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEmailDo
	Not(conds ...gen.Condition) IUserEmailDo
	Or(conds ...gen.Condition) IUserEmailDo
	Select(conds ...field.Expr) IUserEmailDo
	Where(conds ...gen.Condition) IUserEmailDo
	Order(conds ...field.Expr) IUserEmailDo
	Distinct(cols ...field.Expr) IUserEmailDo
	Omit(cols ...field.Expr) IUserEmailDo
	Join(table schema.Tabler, on ...field.Expr) IUserEmailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEmailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEmailDo
	Group(cols ...field.Expr) IUserEmailDo
	Having(conds ...gen.Condition) IUserEmailDo
	Limit(limit int) IUserEmailDo
	Offset(offset int) IUserEmailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEmailDo
	Unscoped() IUserEmailDo
	Create(values ...*model.UserEmail) error
	CreateInBatches(values []*model.UserEmail, batchSize int) error
	Save(values ...*model.UserEmail) error
	First() (*model.UserEmail, error)
	Take() (*model.UserEmail, error)
	Last() (*model.UserEmail, error)
	Find() ([]*model.UserEmail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEmail, err error)
	FindInBatches(result *[]*model.UserEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEmail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEmailDo
	Assign(attrs ...field.AssignExpr) IUserEmailDo
	Joins(fields ...field.RelationField) IUserEmailDo
	Preload(fields ...field.RelationField) IUserEmailDo
	FirstOrInit() (*model.UserEmail, error)
	FirstOrCreate() (*model.UserEmail, error)
	FindByPage(offset int, limit int) (result []*model.UserEmail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEmailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEmailDo) Debug() IUserEmailDo {
	return u.withDO(u.DO.Debug())
}

func (u userEmailDo) WithContext(ctx context.Context) IUserEmailDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEmailDo) ReadDB() IUserEmailDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEmailDo) WriteDB() IUserEmailDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEmailDo) Session(config *gorm.Session) IUserEmailDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEmailDo) Clauses(conds ...clause.Expression) IUserEmailDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEmailDo) Returning(value interface{}, columns ...string) IUserEmailDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEmailDo) Not(conds ...gen.Condition) IUserEmailDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEmailDo) Or(conds ...gen.Condition) IUserEmailDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEmailDo) Select(conds ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEmailDo) Where(conds ...gen.Condition) IUserEmailDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEmailDo) Order(conds ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEmailDo) Distinct(cols ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEmailDo) Omit(cols ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEmailDo) Join(table schema.Tabler, on ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEmailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEmailDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEmailDo) Group(cols ...field.Expr) IUserEmailDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEmailDo) Having(conds ...gen.Condition) IUserEmailDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEmailDo) Limit(limit int) IUserEmailDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEmailDo) Offset(offset int) IUserEmailDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEmailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEmailDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEmailDo) Unscoped() IUserEmailDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEmailDo) Create(values ...*model.UserEmail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEmailDo) CreateInBatches(values []*model.UserEmail, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEmailDo) Save(values ...*model.UserEmail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEmailDo) First() (*model.UserEmail, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEmail), nil
	}
}

func (u userEmailDo) Take() (*model.UserEmail, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEmail), nil
	}
}

func (u userEmailDo) Last() (*model.UserEmail, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEmail), nil
	}
}

func (u userEmailDo) Find() ([]*model.UserEmail, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEmail), err
}

func (u userEmailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEmail, err error) {
	buf := make([]*model.UserEmail, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEmailDo) FindInBatches(result *[]*model.UserEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEmailDo) Attrs(attrs ...field.AssignExpr) IUserEmailDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEmailDo) Assign(attrs ...field.AssignExpr) IUserEmailDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEmailDo) Joins(fields ...field.RelationField) IUserEmailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEmailDo) Preload(fields ...field.RelationField) IUserEmailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEmailDo) FirstOrInit() (*model.UserEmail, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEmail), nil
	}
}

func (u userEmailDo) FirstOrCreate() (*model.UserEmail, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEmail), nil
	}
}

func (u userEmailDo) FindByPage(offset int, limit int) (result []*model.UserEmail, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEmailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEmailDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEmailDo) Delete(models ...*model.UserEmail) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEmailDo) withDO(do gen.Dao) *userEmailDo {
	u.DO = *do.(*gen.DO)
	return u
}
