// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Contact      *contact
	Email        *email
	User         *user
	UserEmail    *userEmail
	UserRelation *userRelation
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Contact = &Q.Contact
	Email = &Q.Email
	User = &Q.User
	UserEmail = &Q.UserEmail
	UserRelation = &Q.UserRelation
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Contact:      newContact(db, opts...),
		Email:        newEmail(db, opts...),
		User:         newUser(db, opts...),
		UserEmail:    newUserEmail(db, opts...),
		UserRelation: newUserRelation(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Contact      contact
	Email        email
	User         user
	UserEmail    userEmail
	UserRelation userRelation
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Contact:      q.Contact.clone(db),
		Email:        q.Email.clone(db),
		User:         q.User.clone(db),
		UserEmail:    q.UserEmail.clone(db),
		UserRelation: q.UserRelation.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Contact:      q.Contact.replaceDB(db),
		Email:        q.Email.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserEmail:    q.UserEmail.replaceDB(db),
		UserRelation: q.UserRelation.replaceDB(db),
	}
}

type queryCtx struct {
	Contact      IContactDo
	Email        IEmailDo
	User         IUserDo
	UserEmail    IUserEmailDo
	UserRelation IUserRelationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Contact:      q.Contact.WithContext(ctx),
		Email:        q.Email.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserEmail:    q.UserEmail.WithContext(ctx),
		UserRelation: q.UserRelation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
