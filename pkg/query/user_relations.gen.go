// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	
	"gorm.io/gen"
	"gorm.io/gen/field"
	
	"gorm.io/plugin/dbresolver"
	
	"bit-mail/pkg/model"
)

func newUserRelation(db *gorm.DB, opts ...gen.DOOption) userRelation {
	_userRelation := userRelation{}

	_userRelation.userRelationDo.UseDB(db, opts...)
	_userRelation.userRelationDo.UseModel(&model.UserRelation{})

	tableName := _userRelation.userRelationDo.TableName()
	_userRelation.ALL = field.NewAsterisk(tableName)
	_userRelation.ID = field.NewInt32(tableName, "id")
	_userRelation.UserOneID = field.NewInt32(tableName, "user_one_id")
	_userRelation.UserTwoID = field.NewInt32(tableName, "user_two_id")
	_userRelation.ActionUserID = field.NewInt32(tableName, "action_user_id")
	_userRelation.RequestedDate = field.NewTime(tableName, "requested_date")
	_userRelation.ResponseDate = field.NewTime(tableName, "response_date")
	_userRelation.Status = field.NewInt32(tableName, "status")

	_userRelation.fillFieldMap()

	return _userRelation
}

type userRelation struct {
	userRelationDo

	ALL           field.Asterisk
	ID            field.Int32
	UserOneID     field.Int32
	UserTwoID     field.Int32
	ActionUserID  field.Int32
	RequestedDate field.Time
	ResponseDate  field.Time
	Status        field.Int32 // 1：主动申请好友，2：被动接受好友，3：拉黑用户

	fieldMap map[string]field.Expr
}

func (u userRelation) Table(newTableName string) *userRelation {
	u.userRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRelation) As(alias string) *userRelation {
	u.userRelationDo.DO = *(u.userRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRelation) updateTableName(table string) *userRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserOneID = field.NewInt32(table, "user_one_id")
	u.UserTwoID = field.NewInt32(table, "user_two_id")
	u.ActionUserID = field.NewInt32(table, "action_user_id")
	u.RequestedDate = field.NewTime(table, "requested_date")
	u.ResponseDate = field.NewTime(table, "response_date")
	u.Status = field.NewInt32(table, "status")

	u.fillFieldMap()

	return u
}

func (u *userRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_one_id"] = u.UserOneID
	u.fieldMap["user_two_id"] = u.UserTwoID
	u.fieldMap["action_user_id"] = u.ActionUserID
	u.fieldMap["requested_date"] = u.RequestedDate
	u.fieldMap["response_date"] = u.ResponseDate
	u.fieldMap["status"] = u.Status
}

func (u userRelation) clone(db *gorm.DB) userRelation {
	u.userRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRelation) replaceDB(db *gorm.DB) userRelation {
	u.userRelationDo.ReplaceDB(db)
	return u
}

type userRelationDo struct{ gen.DO }

type IUserRelationDo interface {
	gen.SubQuery
	Debug() IUserRelationDo
	WithContext(ctx context.Context) IUserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRelationDo
	WriteDB() IUserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRelationDo
	Not(conds ...gen.Condition) IUserRelationDo
	Or(conds ...gen.Condition) IUserRelationDo
	Select(conds ...field.Expr) IUserRelationDo
	Where(conds ...gen.Condition) IUserRelationDo
	Order(conds ...field.Expr) IUserRelationDo
	Distinct(cols ...field.Expr) IUserRelationDo
	Omit(cols ...field.Expr) IUserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRelationDo
	Group(cols ...field.Expr) IUserRelationDo
	Having(conds ...gen.Condition) IUserRelationDo
	Limit(limit int) IUserRelationDo
	Offset(offset int) IUserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRelationDo
	Unscoped() IUserRelationDo
	Create(values ...*model.UserRelation) error
	CreateInBatches(values []*model.UserRelation, batchSize int) error
	Save(values ...*model.UserRelation) error
	First() (*model.UserRelation, error)
	Take() (*model.UserRelation, error)
	Last() (*model.UserRelation, error)
	Find() ([]*model.UserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRelation, err error)
	FindInBatches(result *[]*model.UserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRelationDo
	Assign(attrs ...field.AssignExpr) IUserRelationDo
	Joins(fields ...field.RelationField) IUserRelationDo
	Preload(fields ...field.RelationField) IUserRelationDo
	FirstOrInit() (*model.UserRelation, error)
	FirstOrCreate() (*model.UserRelation, error)
	FindByPage(offset int, limit int) (result []*model.UserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRelationDo) Debug() IUserRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userRelationDo) WithContext(ctx context.Context) IUserRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRelationDo) ReadDB() IUserRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRelationDo) WriteDB() IUserRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRelationDo) Session(config *gorm.Session) IUserRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRelationDo) Clauses(conds ...clause.Expression) IUserRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRelationDo) Returning(value interface{}, columns ...string) IUserRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRelationDo) Not(conds ...gen.Condition) IUserRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRelationDo) Or(conds ...gen.Condition) IUserRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRelationDo) Select(conds ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRelationDo) Where(conds ...gen.Condition) IUserRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRelationDo) Order(conds ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRelationDo) Distinct(cols ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRelationDo) Omit(cols ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRelationDo) Join(table schema.Tabler, on ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRelationDo) Group(cols ...field.Expr) IUserRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRelationDo) Having(conds ...gen.Condition) IUserRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRelationDo) Limit(limit int) IUserRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRelationDo) Offset(offset int) IUserRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRelationDo) Unscoped() IUserRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRelationDo) Create(values ...*model.UserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRelationDo) CreateInBatches(values []*model.UserRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRelationDo) Save(values ...*model.UserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRelationDo) First() (*model.UserRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Take() (*model.UserRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Last() (*model.UserRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Find() ([]*model.UserRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRelation), err
}

func (u userRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRelation, err error) {
	buf := make([]*model.UserRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRelationDo) FindInBatches(result *[]*model.UserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRelationDo) Attrs(attrs ...field.AssignExpr) IUserRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRelationDo) Assign(attrs ...field.AssignExpr) IUserRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRelationDo) Joins(fields ...field.RelationField) IUserRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRelationDo) Preload(fields ...field.RelationField) IUserRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRelationDo) FirstOrInit() (*model.UserRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) FirstOrCreate() (*model.UserRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) FindByPage(offset int, limit int) (result []*model.UserRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRelationDo) Delete(models ...*model.UserRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRelationDo) withDO(do gen.Dao) *userRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
