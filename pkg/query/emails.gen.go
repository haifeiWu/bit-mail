// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	
	"gorm.io/gen"
	"gorm.io/gen/field"
	
	"gorm.io/plugin/dbresolver"
	
	"bit-mail/pkg/model"
)

func newEmail(db *gorm.DB, opts ...gen.DOOption) email {
	_email := email{}

	_email.emailDo.UseDB(db, opts...)
	_email.emailDo.UseModel(&model.Email{})

	tableName := _email.emailDo.TableName()
	_email.ALL = field.NewAsterisk(tableName)
	_email.ID = field.NewInt32(tableName, "id")
	_email.Subject = field.NewString(tableName, "subject")
	_email.Body = field.NewString(tableName, "body")
	_email.SenderID = field.NewInt32(tableName, "sender_id")
	_email.SentAt = field.NewTime(tableName, "sent_at")
	_email.CcList = field.NewString(tableName, "cc_list")
	_email.BccList = field.NewString(tableName, "bcc_list")
	_email.IsDraft = field.NewBool(tableName, "is_draft")
	_email.IsDeleted = field.NewBool(tableName, "is_deleted")

	_email.fillFieldMap()

	return _email
}

type email struct {
	emailDo

	ALL       field.Asterisk
	ID        field.Int32
	Subject   field.String
	Body      field.String
	SenderID  field.Int32
	SentAt    field.Time
	CcList    field.String
	BccList   field.String
	IsDraft   field.Bool
	IsDeleted field.Bool

	fieldMap map[string]field.Expr
}

func (e email) Table(newTableName string) *email {
	e.emailDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e email) As(alias string) *email {
	e.emailDo.DO = *(e.emailDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *email) updateTableName(table string) *email {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Subject = field.NewString(table, "subject")
	e.Body = field.NewString(table, "body")
	e.SenderID = field.NewInt32(table, "sender_id")
	e.SentAt = field.NewTime(table, "sent_at")
	e.CcList = field.NewString(table, "cc_list")
	e.BccList = field.NewString(table, "bcc_list")
	e.IsDraft = field.NewBool(table, "is_draft")
	e.IsDeleted = field.NewBool(table, "is_deleted")

	e.fillFieldMap()

	return e
}

func (e *email) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *email) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["subject"] = e.Subject
	e.fieldMap["body"] = e.Body
	e.fieldMap["sender_id"] = e.SenderID
	e.fieldMap["sent_at"] = e.SentAt
	e.fieldMap["cc_list"] = e.CcList
	e.fieldMap["bcc_list"] = e.BccList
	e.fieldMap["is_draft"] = e.IsDraft
	e.fieldMap["is_deleted"] = e.IsDeleted
}

func (e email) clone(db *gorm.DB) email {
	e.emailDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e email) replaceDB(db *gorm.DB) email {
	e.emailDo.ReplaceDB(db)
	return e
}

type emailDo struct{ gen.DO }

type IEmailDo interface {
	gen.SubQuery
	Debug() IEmailDo
	WithContext(ctx context.Context) IEmailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmailDo
	WriteDB() IEmailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmailDo
	Not(conds ...gen.Condition) IEmailDo
	Or(conds ...gen.Condition) IEmailDo
	Select(conds ...field.Expr) IEmailDo
	Where(conds ...gen.Condition) IEmailDo
	Order(conds ...field.Expr) IEmailDo
	Distinct(cols ...field.Expr) IEmailDo
	Omit(cols ...field.Expr) IEmailDo
	Join(table schema.Tabler, on ...field.Expr) IEmailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmailDo
	Group(cols ...field.Expr) IEmailDo
	Having(conds ...gen.Condition) IEmailDo
	Limit(limit int) IEmailDo
	Offset(offset int) IEmailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailDo
	Unscoped() IEmailDo
	Create(values ...*model.Email) error
	CreateInBatches(values []*model.Email, batchSize int) error
	Save(values ...*model.Email) error
	First() (*model.Email, error)
	Take() (*model.Email, error)
	Last() (*model.Email, error)
	Find() ([]*model.Email, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Email, err error)
	FindInBatches(result *[]*model.Email, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Email) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmailDo
	Assign(attrs ...field.AssignExpr) IEmailDo
	Joins(fields ...field.RelationField) IEmailDo
	Preload(fields ...field.RelationField) IEmailDo
	FirstOrInit() (*model.Email, error)
	FirstOrCreate() (*model.Email, error)
	FindByPage(offset int, limit int) (result []*model.Email, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e emailDo) Debug() IEmailDo {
	return e.withDO(e.DO.Debug())
}

func (e emailDo) WithContext(ctx context.Context) IEmailDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailDo) ReadDB() IEmailDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailDo) WriteDB() IEmailDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailDo) Session(config *gorm.Session) IEmailDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailDo) Clauses(conds ...clause.Expression) IEmailDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailDo) Returning(value interface{}, columns ...string) IEmailDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailDo) Not(conds ...gen.Condition) IEmailDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailDo) Or(conds ...gen.Condition) IEmailDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailDo) Select(conds ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailDo) Where(conds ...gen.Condition) IEmailDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailDo) Order(conds ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailDo) Distinct(cols ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailDo) Omit(cols ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailDo) Join(table schema.Tabler, on ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmailDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmailDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailDo) Group(cols ...field.Expr) IEmailDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailDo) Having(conds ...gen.Condition) IEmailDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailDo) Limit(limit int) IEmailDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailDo) Offset(offset int) IEmailDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailDo) Unscoped() IEmailDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailDo) Create(values ...*model.Email) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailDo) CreateInBatches(values []*model.Email, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailDo) Save(values ...*model.Email) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailDo) First() (*model.Email, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Email), nil
	}
}

func (e emailDo) Take() (*model.Email, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Email), nil
	}
}

func (e emailDo) Last() (*model.Email, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Email), nil
	}
}

func (e emailDo) Find() ([]*model.Email, error) {
	result, err := e.DO.Find()
	return result.([]*model.Email), err
}

func (e emailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Email, err error) {
	buf := make([]*model.Email, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailDo) FindInBatches(result *[]*model.Email, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailDo) Attrs(attrs ...field.AssignExpr) IEmailDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailDo) Assign(attrs ...field.AssignExpr) IEmailDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailDo) Joins(fields ...field.RelationField) IEmailDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailDo) Preload(fields ...field.RelationField) IEmailDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailDo) FirstOrInit() (*model.Email, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Email), nil
	}
}

func (e emailDo) FirstOrCreate() (*model.Email, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Email), nil
	}
}

func (e emailDo) FindByPage(offset int, limit int) (result []*model.Email, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailDo) Delete(models ...*model.Email) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailDo) withDO(do gen.Dao) *emailDo {
	e.DO = *do.(*gen.DO)
	return e
}
