// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.23.4
// source: mail/v1/mail.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMailMessageAddMailMessageByUserID = "/bitMail.v1.MailMessage/AddMailMessageByUserID"
const OperationMailMessageDelMailMessageByUserID = "/bitMail.v1.MailMessage/DelMailMessageByUserID"
const OperationMailMessageListMailMessageByUserID = "/bitMail.v1.MailMessage/ListMailMessageByUserID"
const OperationMailMessageUpdateMailMessageByUserID = "/bitMail.v1.MailMessage/UpdateMailMessageByUserID"

type MailMessageHTTPServer interface {
	// AddMailMessageByUserID Sends a greeting
	AddMailMessageByUserID(context.Context, *AddMailMessageByUserIDRequest) (*AddMailMessageByUserIDReply, error)
	// DelMailMessageByUserID Sends a greeting
	DelMailMessageByUserID(context.Context, *DelMailMessageByUserIDRequest) (*DelMailMessageByUserIDReply, error)
	// ListMailMessageByUserID Sends a greeting
	ListMailMessageByUserID(context.Context, *ListMailMessageByUserIDRequest) (*ListMailMessageByUserIDReply, error)
	// UpdateMailMessageByUserID Sends a greeting
	UpdateMailMessageByUserID(context.Context, *UpdateMailMessageByUserIDRequest) (*UpdateMailMessageByUserIDReply, error)
}

func RegisterMailMessageHTTPServer(s *http.Server, srv MailMessageHTTPServer) {
	r := s.Route("/")
	r.GET("/bit-mail/mail/listMailMessageByUserID", _MailMessage_ListMailMessageByUserID0_HTTP_Handler(srv))
	r.POST("/bit-mail/mail/addMailMessageByUserID", _MailMessage_AddMailMessageByUserID0_HTTP_Handler(srv))
	r.POST("/bit-mail/mail/updateMailMessageByUserID", _MailMessage_UpdateMailMessageByUserID0_HTTP_Handler(srv))
	r.GET("/bit-mail/mail/delMailMessageByUserID", _MailMessage_DelMailMessageByUserID0_HTTP_Handler(srv))
}

func _MailMessage_ListMailMessageByUserID0_HTTP_Handler(srv MailMessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMailMessageByUserIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMailMessageListMailMessageByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMailMessageByUserID(ctx, req.(*ListMailMessageByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMailMessageByUserIDReply)
		return ctx.Result(200, reply)
	}
}

func _MailMessage_AddMailMessageByUserID0_HTTP_Handler(srv MailMessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMailMessageByUserIDRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMailMessageAddMailMessageByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddMailMessageByUserID(ctx, req.(*AddMailMessageByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMailMessageByUserIDReply)
		return ctx.Result(200, reply)
	}
}

func _MailMessage_UpdateMailMessageByUserID0_HTTP_Handler(srv MailMessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMailMessageByUserIDRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMailMessageUpdateMailMessageByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMailMessageByUserID(ctx, req.(*UpdateMailMessageByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMailMessageByUserIDReply)
		return ctx.Result(200, reply)
	}
}

func _MailMessage_DelMailMessageByUserID0_HTTP_Handler(srv MailMessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelMailMessageByUserIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMailMessageDelMailMessageByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelMailMessageByUserID(ctx, req.(*DelMailMessageByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelMailMessageByUserIDReply)
		return ctx.Result(200, reply)
	}
}

type MailMessageHTTPClient interface {
	AddMailMessageByUserID(ctx context.Context, req *AddMailMessageByUserIDRequest, opts ...http.CallOption) (rsp *AddMailMessageByUserIDReply, err error)
	DelMailMessageByUserID(ctx context.Context, req *DelMailMessageByUserIDRequest, opts ...http.CallOption) (rsp *DelMailMessageByUserIDReply, err error)
	ListMailMessageByUserID(ctx context.Context, req *ListMailMessageByUserIDRequest, opts ...http.CallOption) (rsp *ListMailMessageByUserIDReply, err error)
	UpdateMailMessageByUserID(ctx context.Context, req *UpdateMailMessageByUserIDRequest, opts ...http.CallOption) (rsp *UpdateMailMessageByUserIDReply, err error)
}

type MailMessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMailMessageHTTPClient(client *http.Client) MailMessageHTTPClient {
	return &MailMessageHTTPClientImpl{client}
}

func (c *MailMessageHTTPClientImpl) AddMailMessageByUserID(ctx context.Context, in *AddMailMessageByUserIDRequest, opts ...http.CallOption) (*AddMailMessageByUserIDReply, error) {
	var out AddMailMessageByUserIDReply
	pattern := "/bit-mail/mail/addMailMessageByUserID"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMailMessageAddMailMessageByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MailMessageHTTPClientImpl) DelMailMessageByUserID(ctx context.Context, in *DelMailMessageByUserIDRequest, opts ...http.CallOption) (*DelMailMessageByUserIDReply, error) {
	var out DelMailMessageByUserIDReply
	pattern := "/bit-mail/mail/delMailMessageByUserID"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMailMessageDelMailMessageByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MailMessageHTTPClientImpl) ListMailMessageByUserID(ctx context.Context, in *ListMailMessageByUserIDRequest, opts ...http.CallOption) (*ListMailMessageByUserIDReply, error) {
	var out ListMailMessageByUserIDReply
	pattern := "/bit-mail/mail/listMailMessageByUserID"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMailMessageListMailMessageByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MailMessageHTTPClientImpl) UpdateMailMessageByUserID(ctx context.Context, in *UpdateMailMessageByUserIDRequest, opts ...http.CallOption) (*UpdateMailMessageByUserIDReply, error) {
	var out UpdateMailMessageByUserIDReply
	pattern := "/bit-mail/mail/updateMailMessageByUserID"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMailMessageUpdateMailMessageByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
