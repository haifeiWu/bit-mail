// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: mail/v1/mail.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MailMessage_ListMailMessageByUserID_FullMethodName   = "/bitMail.v1.MailMessage/ListMailMessageByUserID"
	MailMessage_AddMailMessageByUserID_FullMethodName    = "/bitMail.v1.MailMessage/AddMailMessageByUserID"
	MailMessage_UpdateMailMessageByUserID_FullMethodName = "/bitMail.v1.MailMessage/UpdateMailMessageByUserID"
	MailMessage_DelMailMessageByUserID_FullMethodName    = "/bitMail.v1.MailMessage/DelMailMessageByUserID"
)

// MailMessageClient is the client API for MailMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailMessageClient interface {
	// Sends a greeting
	ListMailMessageByUserID(ctx context.Context, in *ListMailMessageByUserIDRequest, opts ...grpc.CallOption) (*ListMailMessageByUserIDReply, error)
	// Sends a greeting
	AddMailMessageByUserID(ctx context.Context, in *AddMailMessageByUserIDRequest, opts ...grpc.CallOption) (*AddMailMessageByUserIDReply, error)
	// Sends a greeting
	UpdateMailMessageByUserID(ctx context.Context, in *UpdateMailMessageByUserIDRequest, opts ...grpc.CallOption) (*UpdateMailMessageByUserIDReply, error)
	// Sends a greeting
	DelMailMessageByUserID(ctx context.Context, in *DelMailMessageByUserIDRequest, opts ...grpc.CallOption) (*DelMailMessageByUserIDReply, error)
}

type mailMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewMailMessageClient(cc grpc.ClientConnInterface) MailMessageClient {
	return &mailMessageClient{cc}
}

func (c *mailMessageClient) ListMailMessageByUserID(ctx context.Context, in *ListMailMessageByUserIDRequest, opts ...grpc.CallOption) (*ListMailMessageByUserIDReply, error) {
	out := new(ListMailMessageByUserIDReply)
	err := c.cc.Invoke(ctx, MailMessage_ListMailMessageByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailMessageClient) AddMailMessageByUserID(ctx context.Context, in *AddMailMessageByUserIDRequest, opts ...grpc.CallOption) (*AddMailMessageByUserIDReply, error) {
	out := new(AddMailMessageByUserIDReply)
	err := c.cc.Invoke(ctx, MailMessage_AddMailMessageByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailMessageClient) UpdateMailMessageByUserID(ctx context.Context, in *UpdateMailMessageByUserIDRequest, opts ...grpc.CallOption) (*UpdateMailMessageByUserIDReply, error) {
	out := new(UpdateMailMessageByUserIDReply)
	err := c.cc.Invoke(ctx, MailMessage_UpdateMailMessageByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailMessageClient) DelMailMessageByUserID(ctx context.Context, in *DelMailMessageByUserIDRequest, opts ...grpc.CallOption) (*DelMailMessageByUserIDReply, error) {
	out := new(DelMailMessageByUserIDReply)
	err := c.cc.Invoke(ctx, MailMessage_DelMailMessageByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailMessageServer is the server API for MailMessage service.
// All implementations must embed UnimplementedMailMessageServer
// for forward compatibility
type MailMessageServer interface {
	// Sends a greeting
	ListMailMessageByUserID(context.Context, *ListMailMessageByUserIDRequest) (*ListMailMessageByUserIDReply, error)
	// Sends a greeting
	AddMailMessageByUserID(context.Context, *AddMailMessageByUserIDRequest) (*AddMailMessageByUserIDReply, error)
	// Sends a greeting
	UpdateMailMessageByUserID(context.Context, *UpdateMailMessageByUserIDRequest) (*UpdateMailMessageByUserIDReply, error)
	// Sends a greeting
	DelMailMessageByUserID(context.Context, *DelMailMessageByUserIDRequest) (*DelMailMessageByUserIDReply, error)
	mustEmbedUnimplementedMailMessageServer()
}

// UnimplementedMailMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMailMessageServer struct {
}

func (UnimplementedMailMessageServer) ListMailMessageByUserID(context.Context, *ListMailMessageByUserIDRequest) (*ListMailMessageByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMailMessageByUserID not implemented")
}
func (UnimplementedMailMessageServer) AddMailMessageByUserID(context.Context, *AddMailMessageByUserIDRequest) (*AddMailMessageByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMailMessageByUserID not implemented")
}
func (UnimplementedMailMessageServer) UpdateMailMessageByUserID(context.Context, *UpdateMailMessageByUserIDRequest) (*UpdateMailMessageByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailMessageByUserID not implemented")
}
func (UnimplementedMailMessageServer) DelMailMessageByUserID(context.Context, *DelMailMessageByUserIDRequest) (*DelMailMessageByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMailMessageByUserID not implemented")
}
func (UnimplementedMailMessageServer) mustEmbedUnimplementedMailMessageServer() {}

// UnsafeMailMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailMessageServer will
// result in compilation errors.
type UnsafeMailMessageServer interface {
	mustEmbedUnimplementedMailMessageServer()
}

func RegisterMailMessageServer(s grpc.ServiceRegistrar, srv MailMessageServer) {
	s.RegisterService(&MailMessage_ServiceDesc, srv)
}

func _MailMessage_ListMailMessageByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMailMessageByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailMessageServer).ListMailMessageByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailMessage_ListMailMessageByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailMessageServer).ListMailMessageByUserID(ctx, req.(*ListMailMessageByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailMessage_AddMailMessageByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailMessageByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailMessageServer).AddMailMessageByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailMessage_AddMailMessageByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailMessageServer).AddMailMessageByUserID(ctx, req.(*AddMailMessageByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailMessage_UpdateMailMessageByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailMessageByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailMessageServer).UpdateMailMessageByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailMessage_UpdateMailMessageByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailMessageServer).UpdateMailMessageByUserID(ctx, req.(*UpdateMailMessageByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailMessage_DelMailMessageByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMailMessageByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailMessageServer).DelMailMessageByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailMessage_DelMailMessageByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailMessageServer).DelMailMessageByUserID(ctx, req.(*DelMailMessageByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailMessage_ServiceDesc is the grpc.ServiceDesc for MailMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitMail.v1.MailMessage",
	HandlerType: (*MailMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMailMessageByUserID",
			Handler:    _MailMessage_ListMailMessageByUserID_Handler,
		},
		{
			MethodName: "AddMailMessageByUserID",
			Handler:    _MailMessage_AddMailMessageByUserID_Handler,
		},
		{
			MethodName: "UpdateMailMessageByUserID",
			Handler:    _MailMessage_UpdateMailMessageByUserID_Handler,
		},
		{
			MethodName: "DelMailMessageByUserID",
			Handler:    _MailMessage_DelMailMessageByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail/v1/mail.proto",
}
